{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ipRegex = require('ip-regex');\n\nvar tlds = require('tlds');\n/* istanbul ignore next */\n\n\nvar SafeRegExp = function () {\n  try {\n    var RE2 = require('re2');\n\n    return typeof RE2 === 'function' ? RE2 : RegExp;\n  } catch (_unused) {\n    return RegExp;\n  }\n}();\n\nvar ipv4 = ipRegex.v4().source;\nvar ipv6 = ipRegex.v6().source;\n\nmodule.exports = function (options) {\n  options = _objectSpread({\n    exact: false,\n    strict: false,\n    auth: false,\n    localhost: true,\n    parens: false,\n    apostrophes: false,\n    trailingPeriod: false,\n    ipv4: true,\n    ipv6: true,\n    tlds: tlds,\n    returnString: false\n  }, options);\n  var protocol = \"(?:(?:[a-z]+:)?//)\".concat(options.strict ? '' : '?'); // Add option to disable matching urls with HTTP Basic Authentication\n  // <https://github.com/kevva/url-regex/pull/63>\n\n  var auth = options.auth ? '(?:\\\\S+(?::\\\\S*)?@)?' : '';\n  var host = \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\";\n  var domain = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\"; // Add ability to pass custom list of tlds\n  // <https://github.com/kevva/url-regex/pull/66>\n\n  var tld = \"(?:\\\\.\".concat(options.strict ? \"(?:[a-z\\\\u00a1-\\\\uffff]{2,})\" : \"(?:\".concat(options.tlds.sort(function (a, b) {\n    return b.length - a.length;\n  }).join('|'), \")\"), \")\").concat(options.trailingPeriod ? '\\\\.?' : '');\n  var port = '(?::\\\\d{2,5})?'; // Not accept closing parenthesis\n  // <https://github.com/kevva/url-regex/pull/35>\n  // Don't allow apostrophes\n  // <https://github.com/kevva/url-regex/pull/55>\n\n  var path = options.parens ? options.apostrophes ? '(?:[/?#][^\\\\s\"]*)?' : '(?:[/?#][^\\\\s\"\\']*)?' : options.apostrophes ? '(?:[/?#][^\\\\s\"\\\\)]*)?' : '(?:[/?#][^\\\\s\"\\\\)\\']*)?'; // Added IPv6 support\n  // <https://github.com/kevva/url-regex/issues/60>\n\n  var regex = \"(?:\".concat(protocol, \"|www\\\\.)\").concat(auth, \"(?:\");\n  if (options.localhost) regex += 'localhost|';\n  if (options.ipv4) regex += \"\".concat(ipv4, \"|\");\n  if (options.ipv6) regex += \"\".concat(ipv6, \"|\");\n  regex += \"\".concat(host).concat(domain).concat(tld, \")\").concat(port).concat(path); // Add option to return the regex string instead of a RegExp\n\n  if (options.returnString) return regex;\n  return options.exact ? new SafeRegExp(\"(?:^\".concat(regex, \"$)\"), 'i') : new SafeRegExp(regex, 'ig');\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;AAEA;;;AACA,IAAME,UAAU,GAAI,YAAM;EACxB,IAAI;IACF,IAAMC,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAnB;;IACA,OAAO,OAAOG,GAAP,KAAe,UAAf,GAA4BA,GAA5B,GAAkCC,MAAzC;EAFF,EAGE,gBAAM;IACN,OAAOA,MAAP;EACD;AANgB,CAAC,EAApB;;AAQA,IAAMC,IAAI,GAAGN,OAAO,CAACO,EAARP,GAAaQ,MAA1B;AACA,IAAMC,IAAI,GAAGT,OAAO,CAACU,EAARV,GAAaQ,MAA1B;;AAEAG,MAAM,CAACC,OAAPD,GAAiB,UAACE,OAAD,EAAa;EAC5BA,OAAO;IACLC,KAAK,EAAE,KADF;IAELC,MAAM,EAAE,KAFH;IAGLC,IAAI,EAAE,KAHD;IAILC,SAAS,EAAE,IAJN;IAKLC,MAAM,EAAE,KALH;IAMLC,WAAW,EAAE,KANR;IAOLC,cAAc,EAAE,KAPX;IAQLd,IAAI,EAAE,IARD;IASLG,IAAI,EAAE,IATD;IAULP,IAAI,EAAJA,IAVK;IAWLmB,YAAY,EAAE;EAXT,GAYFR,OAZE,CAAPA;EAeA,IAAMS,QAAQ,+BAAwBT,OAAO,CAACE,MAARF,GAAiB,EAAjBA,GAAsB,GAA9C,CAAd,CAhB4B,CAiB5B;EACA;;EACA,IAAMG,IAAI,GAAGH,OAAO,CAACG,IAARH,GAAe,sBAAfA,GAAwC,EAArD;EACA,IAAMU,IAAI,GAAG,+DAAb;EACA,IAAMC,MAAM,GACV,gEADF,CArB4B,CAuB5B;EACA;;EACA,IAAMC,GAAG,mBACPZ,OAAO,CAACE,MAARF,GACI,8BADJA,gBAEUA,OAAO,CAACX,IAARW,CAAaa,IAAbb,CAAkB,UAACc,CAAD,EAAIC,CAAJ;IAAA,OAAUA,CAAC,CAACC,MAAFD,GAAWD,CAAC,CAACE,MAAvB;EAAlB,GAAiDC,IAAjDjB,CAAsD,GAAtDA,CAFV,MADO,cAILA,OAAO,CAACO,cAARP,GAAyB,MAAzBA,GAAkC,EAJ7B,CAAT;EAMA,IAAMkB,IAAI,GAAG,gBAAb,CA/B4B,CAgC5B;EACA;EACA;EACA;;EACA,IAAMC,IAAI,GAAGnB,OAAO,CAACK,MAARL,GACTA,OAAO,CAACM,WAARN,GACE,oBADFA,GAEE,sBAHOA,GAITA,OAAO,CAACM,WAARN,GACA,uBADAA,GAEA,yBANJ,CApC4B,CA4C5B;EACA;;EACA,IAAIoB,KAAK,gBAASX,QAAT,qBAA4BN,IAA5B,QAAT;EACA,IAAIH,OAAO,CAACI,SAAZ,EAAuBgB,KAAK,IAAI,YAATA;EACvB,IAAIpB,OAAO,CAACP,IAAZ,EAAkB2B,KAAK,cAAO3B,IAAP,MAAL2B;EAClB,IAAIpB,OAAO,CAACJ,IAAZ,EAAkBwB,KAAK,cAAOxB,IAAP,MAALwB;EAClBA,KAAK,cAAOV,IAAP,SAAcC,MAAd,SAAuBC,GAAvB,cAA8BM,IAA9B,SAAqCC,IAArC,CAALC,CAlD4B,CAoD5B;;EACA,IAAIpB,OAAO,CAACQ,YAAZ,EAA0B,OAAOY,KAAP;EAE1B,OAAOpB,OAAO,CAACC,KAARD,GACH,IAAIV,UAAJ,eAAsB8B,KAAtB,SAAiC,GAAjC,CADGpB,GAEH,IAAIV,UAAJ,CAAe8B,KAAf,EAAsB,IAAtB,CAFJ;AAvDF","names":["ipRegex","require","tlds","SafeRegExp","RE2","RegExp","ipv4","v4","source","ipv6","v6","module","exports","options","exact","strict","auth","localhost","parens","apostrophes","trailingPeriod","returnString","protocol","host","domain","tld","sort","a","b","length","join","port","path","regex"],"sources":["../src/index.js"],"sourcesContent":["const ipRegex = require('ip-regex');\nconst tlds = require('tlds');\n\n/* istanbul ignore next */\nconst SafeRegExp = (() => {\n  try {\n    const RE2 = require('re2');\n    return typeof RE2 === 'function' ? RE2 : RegExp;\n  } catch {\n    return RegExp;\n  }\n})();\nconst ipv4 = ipRegex.v4().source;\nconst ipv6 = ipRegex.v6().source;\n\nmodule.exports = (options) => {\n  options = {\n    exact: false,\n    strict: false,\n    auth: false,\n    localhost: true,\n    parens: false,\n    apostrophes: false,\n    trailingPeriod: false,\n    ipv4: true,\n    ipv6: true,\n    tlds,\n    returnString: false,\n    ...options\n  };\n\n  const protocol = `(?:(?:[a-z]+:)?//)${options.strict ? '' : '?'}`;\n  // Add option to disable matching urls with HTTP Basic Authentication\n  // <https://github.com/kevva/url-regex/pull/63>\n  const auth = options.auth ? '(?:\\\\S+(?::\\\\S*)?@)?' : '';\n  const host = '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)';\n  const domain =\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*';\n  // Add ability to pass custom list of tlds\n  // <https://github.com/kevva/url-regex/pull/66>\n  const tld = `(?:\\\\.${\n    options.strict\n      ? '(?:[a-z\\\\u00a1-\\\\uffff]{2,})'\n      : `(?:${options.tlds.sort((a, b) => b.length - a.length).join('|')})`\n  })${options.trailingPeriod ? '\\\\.?' : ''}`;\n\n  const port = '(?::\\\\d{2,5})?';\n  // Not accept closing parenthesis\n  // <https://github.com/kevva/url-regex/pull/35>\n  // Don't allow apostrophes\n  // <https://github.com/kevva/url-regex/pull/55>\n  const path = options.parens\n    ? options.apostrophes\n      ? '(?:[/?#][^\\\\s\"]*)?'\n      : '(?:[/?#][^\\\\s\"\\']*)?'\n    : options.apostrophes\n    ? '(?:[/?#][^\\\\s\"\\\\)]*)?'\n    : '(?:[/?#][^\\\\s\"\\\\)\\']*)?';\n\n  // Added IPv6 support\n  // <https://github.com/kevva/url-regex/issues/60>\n  let regex = `(?:${protocol}|www\\\\.)${auth}(?:`;\n  if (options.localhost) regex += 'localhost|';\n  if (options.ipv4) regex += `${ipv4}|`;\n  if (options.ipv6) regex += `${ipv6}|`;\n  regex += `${host}${domain}${tld})${port}${path}`;\n\n  // Add option to return the regex string instead of a RegExp\n  if (options.returnString) return regex;\n\n  return options.exact\n    ? new SafeRegExp(`(?:^${regex}$)`, 'i')\n    : new SafeRegExp(regex, 'ig');\n};\n"]},"metadata":{},"sourceType":"script"}